# Path to your oh-my-zsh installation.
export ZSH=~/.oh-my-zsh

#autoload -Uz promptinit promptinit

autoload colors
colors

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="robbyrussell"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git git-flow brew github osx adb zsh_reload emoji tmux)

# User configuration

source $ZSH/oh-my-zsh.sh

#Set editor to use by default
EDITOR=nvim
VISUAL=$EDITOR
export EDITOR VISUAL
export HOMEBREW_GITHUB_API_TOKEN=027bd8b8f24299e032b316cf12a1914f235f0c51
export ANDROID_HOME=~/Library/Android/sdk
export TMUX_HOME=~/Devel/Workspace/tools/tmux
export GOPATH=/usr/local/opt/go/libexec/bin
export RBENV_ROOT=/usr/local/var/rbenv
export HF_HOME=/opt/hellofresh/bin
export FASTLANE_HOME="$HOME/.fastlane/bin"
#export JAVA_HOME=/usr/bin/java
export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/
export JDK_16=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
export JDK_17=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home
#export JDK_18=$JAVA_HOME
export FLUTTER_HOME=~/Devel/Workspace/flutter
export PATH=$JAVA_HOME/bin:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools/bin:$TMUX_HOME:$GOPATH:$RBuNV_ROOT:$HF_HOME:$FASTLANE_HOME:$JDK_16/bin:$JDK_17/bin:$FLUTTER_HOME/bin:$PATH

export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH"
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Compilation flags
export ARCHFLAGS="-arch x86_64"

# ssh
export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#Set alias for the frequently used commands
alias ls='ls -G -F'
alias grep='grep --color=auto'
alias df='df -h'
alias ll='ls -lh'
alias lh='ls -A'

# few alias for the git repo
alias moto360='adb forward tcp:4444 localabstract:/adb-hub && adb connect localhost:4444'
alias gst='git status'
alias gb='git branch'
alias gcp='git cherry-pick'
alias glg='git log --stat --max-count=5'
alias ggpull='git pull origin $(current_branch)'
alias ggpush='git push origin $(current_branch)'
alias ggpnp='git pull origin $(current_branch) && git push origin $(current_branch)'
alias ggcmt='git commit -a'
alias gbc='git checkout -b'
alias gbs='git show-branch'
alias gbS='git show-branch -a'
alias glog="git log --graph --pretty=format:'%Cred%h%Creset %C(bold blue)<%an>%Creset %s %Cgreen(%cr) %C(yellow)%d%Creset' --abbrev-commit --date=relative"
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# In order for gpg to find gpg-agent, gpg-agent must be running, and there must be an env
# variable pointing GPG to the gpg-agent socket. This little script, which must be sourced
# in your shell's init script (ie, .bash_profile, .zshrc, whatever), will either start
# gpg-agent or set up the GPG_AGENT_INFO variable if it's already running.

# Add the following to your shell init to set up gpg-agent automatically for every shell
#if [ -f ~/.gnupg/.gpg-agent-info ] && [ -n "$(pgrep gpg-agent)" ]; then
#    source ~/.gnupg/.gpg-agent-info
#    export GPG_AGENT_INFO
#else
#    eval $(gpg-agent --daemon --write-env-file ~/.gnupg/.gpg-agent-info)
#fi

# added by travis gem
[ -f ~/.travis/travis.sh ] && source ~/.travis/travis.sh

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# oh-my-zsh emojis
local ret_status="%(?:%{$fg_bold[green]%}$emoji[smiling_face_with_sunglasses]:%{$fg_bold[red]%}$emoji[face_screaming_in_fear])"
PROMPT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[blue]%}git:(%{$fg[red]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%} "
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%}) %{$fg[yellow]%}âœ—"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%})"

#PROMPT="$emoji[smiling_face_with_sunglasses] ${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/eyedol/.sdkman"
[[ -s "/Users/eyedol/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/eyedol/.sdkman/bin/sdkman-init.sh"
export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

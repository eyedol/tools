#!/bin/bash
#
# Setup up dotfiles
set -eu

os="mac"
mac="mac"

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

make_workspace_dir() {
  local workspace=~/Devel/Workspace
  if [ ! -d "$workspace" ]; then
    mkdir -p "$workspace"
    fancy_echo "Creating workspace directory done."
  fi
}

# Checks if a particular program is installed on the machine
exists() {
  command -v "$1" >/dev/null 2>&1
}

display_success_message() {
  fancy_echo "$1 successfully installed."
}

is_homebrew_installed() {
  if ! exists brew; then
    fancy_echo "Please make sure homebrew and brew-cask are installed on the machine"
    fancy_echo "See: https://brew.sh/"
    fancy_echo "See: https://caskroom.github.io/"
    exit 1
  fi
}

install_zsh_files() {
  local zshrc_file=~/.zshrc
  local zshenv_file=~/.zshenv
  local oh_my_zsh=~/.oh-my-zsh/
  if [ ! -d "$oh_my_zsh" ]; then
     # install oh-my-zsh
     sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
     display_success_message "oh_my_zsh"
  fi
  # Delete any installed zshrc file
  if [ -f "$zshrc_file" ] || [ -L "$zshrc_file" ]; then
    rm -f $zshrc_file
  fi

  # Delete any installed zshenv file
  if [ -f "$zshenv_file" ] || [ -L "$zshenv_file" ]; then
    rm -f $zshenv_file
  fi
  ln -s "$PWD"/zshenv "$zshenv_file"
  ln -s "$PWD"/mac-zshrc "$zshrc_file"
  # Source "$zshrc_file"
  display_success_message "$zshrc_file"
}

#is_haxornews_installed() {
#}

install_htop() {
  local htop_rc=~/.htoprc
  # Install htop if it doesn't exists
  if ! exists htop && [ "$os" == "$mac" ] ; then
    brew install htop
  fi
  # Delete any installed htop_rc file
  if [ -f "$htop_rc" ] || [ -L "$htop_rc" ]; then
    rm -f "$htop_rc"
  fi
  ln -s "$PWD"/htop/htoprc "$htop_rc"
}

install_git() {
  local git_conf=~/.gitconfig

  # Install git if it doesn't exists
  if ! exists git; then
    brew install git
  fi
  # Delete any installed git directory
  if [ -d "$git_conf" ] || [ -L "$git_conf" ]; then
    rm -rf "$git_conf"
  fi

  ln -s "$PWD"/git/gitconfig "$git_conf"
  display_success_message "$git_conf"
}

install_tmux() {
  local tmux_conf=~/.tmux.conf
  local tmux_dir=~/.tmux
  # Install htop if it doesn't exists
  if ! exists tmux && [ "$os" == "$mac" ];then
    brew install tmux
  fi
  # Delete any installed tmux.conf file
  if [ -f "$tmux_conf" ] || [ -L "$tmux_conf" ]; then
    rm -f "$tmux_conf"
  fi
  ln -s "$PWD"/tmux/.tmux.conf "$tmux_conf"
  display_success_message "$tmux_conf"
  if [ -d "$tmux_dir" ] || [ -L "$tmux_dir" ]; then
    rm -rf "$tmux_dir"
  fi
  ln -s "$PWD"/tmux/.tmux "$tmux_dir"
  display_success_message "$tmux_dir"
}

install_nvim() {
  local nvim_dir=~/.config/nvim
  # Install nvim if it doesn't exists
  if ! exists nvim && [ "$os" == "$mac" ]; then
    brew install nvim
  fi
  # Delete any installed nvim directory
  if [ -d "$nvim_dir" ] || [ -L "$nvim_dir" ]; then
    rm -rf "$nvim_dir"
  fi
  pushd "${PWD}/config/nvim"
  ./install.sh
  popd
  display_success_message "$nvim_dir"
}

help() {
  # Display Help
  fancy_echo "Facilitates the migration and backup of computer configurations, including Homebrew installations."
  fancy_echo "Syntax: install.sh [-p|h|v]"
  fancy_echo "options:"
  fancy_echo "p     The operating system to port to. Valid values are mac, linux"
  fancy_echo "h     Print this Help."
  fancy_echo "v     Print version and exit."
}

version() {
  fancy_echo "v1.0.0"
}

mac_install() {
  fancy_echo "Restoring a mac install"
  make_workspace_dir
  is_homebrew_installed
  check_and_update_shell_to_zsh
  install_zsh_files
  install_htop
  install_git
  install_tmux
  install_nvim
  fancy_echo "Done"
}

linux_install() {
  fancy_echo "Restoring a linux install"
  make_workspace_dir
  check_and_update_shell_to_zsh
  install_zsh_files
  install_htop
  install_git
  install_tmux
  install_nvim
  fancy_echo "Done"
}

update_shell() {
  fancy_echo "Updating shell"
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

check_and_update_shell_to_zsh() {
  # Check if using zsh and not Homebrew-installed zsh
  if [[ "$SHELL" == */zsh ]] && [[ "$(command -v zsh)" != "$HOMEBREW_PREFIX/bin/zsh" ]]; then
    update_shell
  else
    # Update shell if not using native or Homebrew zsh
    update_shell
  fi
}

#######################
#    Main function    #
#######################
#######################
#    Process options  #
#######################

# Get the options
# Credits: https://www.redhat.com/sysadmin/arguments-options-bash-scripts
while getopts ":hp:" option; do
   case $option in
      h) # Display help
         help
         exit;;
      p) # Enter operating system
         os=$OPTARG;;
      \?) # Invalid option
         fancy_echo "Error: Invalid option"
         exit;;
   esac
done

linux="linux"

if  [[ "$os" == "$mac" ]]; then
  mac_install
elif  [[ "$os" == "$linux" ]]; then
  linux_install
else
  fancy_echo "$os is an unsupported operating system. Supported os are $mac, $linux"
fi
